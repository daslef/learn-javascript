export const code = {
  declaration: {
    syntax: `def –∏–º—è_—Ñ—É–Ω–∫—Ü–∏–∏ (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã):
  /* —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ */
`,
    example: `
# –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω—ã–π –ø–æ–¥—Ö–æ–¥
def hello(name):
  if name.startswith('Mr.'):
    print("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ,", name")  
  else:
    print("–ü—Ä–∏–≤–µ—Ç,", name, "üòä")

hello('Rudy')
hello('Mr. Glance')

# —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
def hello(name):
  if name.startswith('Mr.'):
    return "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ," + name
  else:
    return "–ü—Ä–∏–≤–µ—Ç," + name + "üòä"

print(hello('Rudy'))
print(hello('Mr. Glance'))
`
  },
  typing: {
    syntax: `def –∏–º—è (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Ç–∏–ø—ã) -> –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π —Ç–∏–ø:
  /* —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ */
`,
    example: `
# –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω—ã–π –ø–æ–¥—Ö–æ–¥
def hello(name: str) -> None:
  if name.startswith('Mr.'):
    print("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ,", name")  
  else:
    print("–ü—Ä–∏–≤–µ—Ç,", name, "üòä")

hello('Rudy')
hello('Mr. Glance')

# —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
def hello(name: str) -> str:
  if name.startswith('Mr.'):
    return "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ," + name
  else:
    return "–ü—Ä–∏–≤–µ—Ç," + name + "üòä"

print(hello('Rudy'))
print(hello('Mr. Glance'))
`
  },
  arrow: {
    syntax: `–∏–º—è_—Ñ—É–Ω–∫—Ü–∏–∏ = lambda –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π_–æ—Ç–≤–µ—Ç`,
    example: `

# —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–π —Å–∞—Ö–∞—Ä
hello = lambda name: 
  "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ," + name if name.startswith('Mr.') else "–ü—Ä–∏–≤–µ—Ç," + name + "üòä"

print(hello('Rudy'))
print(hello('Mr. Glance'))

# —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
filtered_users = filter(lambda user: not(user['anonymous']), users)
`
  }
};
