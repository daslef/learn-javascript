export const code = {
  declaration: {
    syntax: `function –∏–º—è_—Ñ—É–Ω–∫—Ü–∏–∏ (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã) {
  /* —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ */
}`,
    example: `function hello(name) {
  if (name.startsWith('Mr.')) {
    alert(\`–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, \${name}\`)  
  } else {
    alert(\`–ü—Ä–∏–≤–µ—Ç \${name} üòä\`)
  }
}

hello('Rudy')
hello('Mr. Glance')`
  },
  expression: {
    syntax: `const –∏–º—è_—Ñ—É–Ω–∫—Ü–∏–∏ = function (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã) {
  /* —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ */
}`,
    example: `const hello = function (name) {
  if (name.startsWith('Mr.')) {
    alert(\`–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, \${name}\`)  
  } else {
    alert(\`–ü—Ä–∏–≤–µ—Ç \${name} üòä\`)
  }
}

hello('Rudy')
hello('Mr. Glance')`
  },
  arrow: {
    syntax: `// –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
const –∏–º—è_—Ñ—É–Ω–∫—Ü–∏–∏ = (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã) => –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π_–æ—Ç–≤–µ—Ç

// –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
const –∏–º—è_—Ñ—É–Ω–∫—Ü–∏–∏ = (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã) => {
  /* —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ */
}`,
    example: `const hello = function (name) {
  if (name.startsWith('Mr.')) {
    alert(\`–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, \${name}\`)  
  } else {
    alert(\`–ü—Ä–∏–≤–µ—Ç \${name} üòä\`)
  }
}

hello('Rudy')
hello('Mr. Glance')`
  }
};
