export const categories = {
  –ü–æ–∏—Å–∫: ['find', 'indexOf', 'lastIndexOf', 'findIndex'],
  –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: ['sort', 'reverse'],
  –ü—Ä–æ–≤–µ—Ä–∫–∞: ['includes', 'some', 'every', 'isArray'],
  –ò—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ: ['forEach –∏ HOF'],
  –ü—Ä–æ—á–µ–µ: ['length', 'flat', 'slice', 'copyWithin', 'join', '...']
};

export const info = {
  length: {
    text: '[—Å–≤–æ–π—Å—Ç–≤–æ] –î–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ (–Ω–∞–∏–±–æ–ª—å—à–∏–π –∏–Ω–¥–µ–∫—Å + 1)',
    code: 'fruits.length',
    codeResult: '5'
  },
  find: {
    text: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–∏, –ª–∏–±–æ undefined',
    code: `fruits.find(el => el === 'üçá'), fruits.find(el => el !== 'üçá')`,
    codeResult: 'üçá, üçç'
  },
  findIndex: {
    text: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–∏, –ª–∏–±–æ -1',
    code: `fruits.findIndex(el => el === 'üçä')`,
    codeResult: '-1'
  },
  indexOf: {
    text: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –ª–∏–±–æ -1',
    code: `fruits.indexOf('üçç'), fruits.indexOf('üçä')`,
    codeResult: '1, -1'
  },
  lastIndexOf: {
    text: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –ª–∏–±–æ -1',
    code: `fruits.lastIndexOf('üçá')`,
    codeResult: '3'
  },
  sort: {
    text: '–°–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ in-place (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–æ —Ç–∞–±–ª–∏—Ü–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏)',
    code: `fruits.sort()`,
    codeResult: `['üçá', 'üçá', 'üçâ', 'üçå', 'üçç']`
  },
  reverse: {
    text: '–°–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ in-place –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
    code: `fruits.startsWith('l')`,
    codeResult: `['üçâ', 'üçá', 'üçå', 'üçç', 'üçá', ]`
  },
  includes: {
    text: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤–µ',
    code: `fruits.includes(NaN), fruits.includes('üçå')`,
    codeResult: 'false, true'
  },
  some: {
    text: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
    code: `fruits.some(el => el.length > 1)`,
    codeResult: 'true'
  },
  every: {
    text: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—Ç –ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
    code: `fruits.every(el => typeof el === 'string')`,
    codeResult: 'true'
  },
  isArray: {
    text: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–µ—á—Ç–æ –º–∞—Å—Å–∏–≤–æ–º',
    code: `fruits.isArray(), 'abc'.isArray()`,
    codeResult: 'true, false'
  },
  'forEach –∏ HOF': {
    text: 'forEach, map, filter, reduce, reduceRight',
    code: `–∏–∑—É—á–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ!`,
    codeResult: '—á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–Ω—è—Ç–∏–π!'
  },
  flat: {
    text: '"–£–ø–ª–æ—â–∞–µ—Ç" –º–∞—Å—Å–∏–≤ in-place –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π (–ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é 1)',
    code: `[1,[2,3,[4,5,6]]].flat(), [1,[2,3,[4,5,6]]].flat(2), [1,[2,3,[4,5,6]]].flat(Infinite)`,
    codeResult: '[1,2,3,[4,5,6], [1,2,3,4,5,6], [1,2,3,4,5,6]'
  },
  slice: {
    text: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—á–∞—Å—Ç–æ–∫ –º–∞—Å—Å–∏–≤–∞ [–∏–Ω–¥–µ–∫—Å1, –∏–Ω–¥–µ–∫—Å2), –Ω–µ –∏–∑–º–µ–Ω—è—è –∏—Å—Ö–æ–¥–Ω—ã–π',
    code: `fruits.slice(2,4)`,
    codeResult: 'üçå, üçá'
  },
  join: {
    text: '–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞, —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å',
    code: `fruits.join(' üî™ ')`,
    codeResult: 'üçá üî™ üçç üî™ üçå üî™ üçá üî™ üçâ'
  },
  '...': {
    text: '–û–± –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–∞—Ö –º–∞—Å—Å–∏–≤–æ–≤',
    code: `'MDN'`,
    codeResult:
      'https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#instance_properties'
  }
};
